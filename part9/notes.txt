This part is about Typescript Superset of js develoepd by Microsoft
===part a background and introduction===
Typescript offers better dev time tooling, static code analysis, compile time type checking and code level documentation
typescript transpiles into javescript and version of transpilation can be configured
Type annotations to record intended contract of function or variables
type inference from params
any type is a wildcard
void is absence of any type
types are removed at runtime by type erasure
external libraries may not have their own types defined and we may have to write types ourselves or grab from github
typescript error messages have most useful information at the end
===part b first steps with typescript===
ts-node package compiles and executes ts immediately so no need for separate build compilation step
npm install --save-dev ts-node typescript
setup script "ts-node": "ts-node"
tsconfig.json for configs
can config how strict the compiler is, which files to watch or ignore, and etc
const multiplicator = (a: number, b: number, printText: string): number =>
typescript will let you know if you try to call funcion with invalid param types
can create custom type using type
type Operation = 'multiply' | 'add' | 'divide';
union type is created by using |
type keyword defines new name for type called type alias
unknown is a top type safe counterpart of any - anything is assignable to unknown but unknown isnt assignable to anything but itself and any without type assertions
Usually, types for existing packages can be found from the @types organization within npm
Definitely typed community project maintains types for all major packages
npm install --save-dev @types/express @types/lodash @types/jest @types/mongoose......
NaN is actually type number check using isNaN
interface keyword to define shape object should have
going to work with express ts npm install express and add script "start": "ts-node index.js"
may have some warnings with express types
npm install --save-dev @types/express
ts-node-dev is ts equilvalent alternative of nodemon
npm install --save-dev ts-node-dev
script: "dev": "ts-node-dev index.ts",
every untyped variable whose type cannot be inferred implicitly becomes type any
implicit any typings can lead to problems
can use eslint to further enforce coding style
npm install --save-dev eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser
script to inspect "lint": "eslint --ext .ts ."
===part c typing the express app===
TypeScript's Native Compiler (tsc) can help us initialize
npm install typescript --save-dev
script "tsc": "tsc"
can initialize tsconfig.json settings with
npm run tsc -- --init
extra -- before are args for npm whereas after are for tsc
bunch of configs in tsconfig.json file
outDir tells where to place compiled code
esModuleInterop allows interoperability between CommonJS and ES Modules
npm install express
npm install --save-dev eslint @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser
npm install --save-dev ts-node-dev
scripts
    "dev": "ts-node-dev index.ts",
    "lint": "eslint --ext .ts ."
npm run tsc would then compile to outDir
add .eslintignore file to ignore build
can add npm script to run app in production mode
"start": "node build/index.js"
code in this part of the course is structured a bit differently
index.js moved to src
src/controllers nameds to src/routes
in index route requests to specific routers app.use('/api/diary',diaryRouter)
separate business logic from router code using services
ts compiler will warn us if we attempt to put wrong type in object
becareful when using assertions can cause runtime error
ensure each file in flat directory have unique name so that imports don't get confused
utility type pick to enforce sensitive data is not used
const getNonSensitiveEntries =
  (): Array<Pick<DiaryEntry, 'id' | 'date' | 'weather' | 'visibility'>> => {
or use omit to exclude fields
const getNonSensitiveEntries = (): Omit<DiaryEntry, 'comment'>[] => {
another way is to declare new type
export type NonSensitiveDiaryEntry = Omit<DiaryEntry, 'comment'>;
typescript doesn't modify actual data, but only its types
so we have to exclude fields ourselves
typescript warns if using Array.find would return undefined
add a new type that omits id field to handle adding new data
id will be generated on backend
should parse and validate each field of data we are receiving
use unknown for type coming for input validation
type guard function returns boolean and has a type predicate as the return type
predicate form parameterName is Type
ex. text is string
two ways to create strings normal or with constructor
better to have this: return typeof text === 'string' || text instanceof String;
instead of type aliase for weather, use enum which allows usage at runtime, not only in compilation
unknown type doesnt allow operations
can fix by destructuring fields to variables of type unknown
or use type any and disable lint for line
===part d react with types===
want typescript to catch errors:
  Trying to pass an extra/unwanted prop to a component
  Forgetting to pass a required prop to a component
  Passing a prop of a wrong type to a component
can use create react app to create typescript react app
npx create-react-app my-app --template typescript
tsconfig lib includes type of browser APIs to project
allowJs for mixing ts and js
can loosen some rules
return type of basically all React components is JSX.Element or null
config linter to parse *.tsx files
add script "lint": "eslint './src/**/*.{ts,tsx}'"
or "eslint \"./src/**/*.{ts,tsx}\"" for windows
will use an interface for the parameter types (i.e., props) and JSX.Element as the return type for any react component
interface MyProps {
  label: string;
  price?: number;
}
can also do inline
  const MyComp4 = ({ label, price }: { label: string, price: number }) => {
consider courseParts having different attributes
can make types for different part structurs and union them
string literal portion should be able to differentiate types
can then make base with common attributes and extend it to create part specific types
one way to handle union types in component is using switch case expressions
using an identifying attribute that is distinct to each type (mainly derived from a base type)
exhaustive type checking. Its basic principle is that if we encounter an unexpected value, we call a function that accepts a value with the type never and also has the return type never.
