Implementing simple REST API in Node.js using Express
data stored in MongoDB
===part a Node.js and Express===
Node is js runtime
Node uses CommonJS modules that are imported using requires
Express is a back end web application framework for Node.js
trainsitive dependencies = dependencies of dependecies and so on
JSON.stringify to send objects
express handles automatically using response.json(obj)
nodemon watches files in directory and restarts if anything changes
"dev": "nodemon index.js", added to script and run npm run dev
REST Representational State Transfer
Every resource has an associated URL which is the resource's unique address.
define route with parameters for fetching a single resource
- app.get('/api/notes/:id', (request, res...
id parameter can be access in request object
- const id = request.params.id
- parameter is string convert to number using Number() or +
 response.status(404).end() status method to set status and end to respond with no data
 can use postman or VS code REST client plugin to check HTTP requests
 In order to access the data easily, we need the help of the express json-parser that is taken to use with command app.use(express.json()).
 make sure content-type header is set to one that is handled by server
 - application/json
 request types should be safe and idempotence according to the standard
 safety means executing request must not cause any side effects ie changing state of database
 -idempotence if request has side effects then result should be the same no matter how many times request is made
 POST is neither safe or idempotent
 json-parser is example of middleware
 middleware are functions for handling request and response objects
 can make own middleware as a function with three parameters
 - const requestLogger = (request, response, next) => {
middleware functions are called in the order that they're taken into use with express server
app.use(requestLogger)
note to not log any private information because it may violate privacy laws
===part b deploying app to internet ===
CORS Cross-Origin Resource Sharing
- mechanism that allows restricted resources to be accessed from another domain outside of where the resource literals
npm install cors
const cors=require('cors')
app.use(cors())
heroku to deploy backend add procfile and modify port to use process.env.port
react app production build can be created using npm run build
once build folder is made can put on backend and use a relative baseUrl
then add proxy in package.json to ensure dev works
 "proxy": "http://localhost:3001"
===part c saving data to MongoDB===
can use node --inspect index.js and clicking node icon in chrome developer tools
to open up sources tab and set breakpoints for debugging
full stack has many potential areas for bugs frontend backend database and one must utilize all tools to find em
mongoDB is a so-called nosql or document database as opposed to relational databases
mongoDB stores data records as BSON documents which are binary representations of JSON documents
Mongoose library offers a higher level API for connecting to db
Mongoose is a object document mapper ODM and saving js objects as mongo documents is easily
can create db using web app but is not neccessary since mongodb atlas automatically creates db when an app tries to connect to one that doesnt exist
define schema and matching model for data resource
document databases like mongo are schemaless meaning database itself does not care about the structure of the data in it
models are constructor functions that create new js objects based on the provided parameters
saving to db happens with save() method that can be provided with then() event handler
mongoose.connection.close() in the then() callback else the program will never finish its execution
find() method of the constructor model can be used to retrieve db objects

