Returning to frontend in this part. Looking at different possibilities for testing React code
Implement token based authentication for user login
===part a login in frontend===
form with fields that synchronize changes in the field with the state in component
conditionally render components {user === null ?
      loginForm() :
      noteForm()
    }
put headers into config in third parameter passed via axios
 const config = {
    headers: { Authorization: token },
  }

  const response = await axios.post(baseUrl, newObject, config)
can save token to local storage which is a key value database in browser
window.localStorage.setItem('name', 'juha tauriainen')
window.localStorage.getItem('name')
removeItem removes an item
storage is origin specific so each web app has its own storage
have to save objects using JSON.stringify
and use JSON.parse with getting objects
use effect hook to check local storage
empty array as hooks dependency array ensures it is only run when component is rendered for the first time
log out a user by removing the key from localStorage
how to cope with situation when API access of token holder needs to be revoked
- one limit validity period of token
-- forces app relogin if token expires
- second save validity information of token to database known as server side session
saving token in local storage is security risk
- subject to cross site scripting (XSS) attacks
can also save identity of signed in user as httpOnly cookies
- this is subject to cross site forgery
-- js no access to token but makes SPA more complex probably need separate page for login
- probably best to implement both tokens and cookies and have backend construct authentication using both
===part b props.children and proptypes===
can set style inline using code with style attribute
can wrap components with other components
props.children then references the child components of the component
child components are React elements defined between opening and closing tags
children props is automatically added by React and always exists
component with self closing tag has empty array as props.children
can reference component using useRef
ex. ref={noteFormRef} and const noteFormRef = useRef();
useRef ensures the same reference is kept throughout component rerenders
- import { useState, forwardRef, useImperativeHandle } from 'react'
- const Togglable = forwardRef((props, ref) => {
  - useImperativeHandle(ref, () => {
    return {
      toggleVisibility
    }
  })
component is wrapped in forwardref function call
the component uses the useImperativeHandle hook to make its toggleVisibility function available outside of the component.
can now call it via  noteFormRef.current.toggleVisibility()
useImperativeHandle function is hook to define functions which can be invoked outside of component
proptypes
prop-types package can be used to define expected and required component props
import PropTypes from 'prop-types'
Togglable.propTypes = {
  buttonLabel: PropTypes.string.isRequired
}
frontend eslinting
npm install --save-dev eslint-plugin-jest
.eslintrc.js file with lint configs
.eslintignore file with contents:
  node_modules
  build
  .eslintrc.js
note to not run eslint --init command because latest version of eslint is probably not compatible with config file create by create-react-app
===part c testing react apps===
using jest testing library
and react-testing-library to help render components
and jest-dom for jest related helper functions
npm install --save-dev @testing-library/react @testing-library/jest-dom
add classname to elements to make it easier to access component in tests
normally react components are rendered to the DOM
render method used in tests renders it in format suitable for tests without rendering to the DOM
by default npm test will not exit once tests have finished but
will retest once files are changed
file monitoring is done by facebooks Watchman https://facebook.github.io/watchman/
CI=true npm test to run tests manually
personal preference for where to put test files
can be with the component tested or in separate test directory all together
can use querySelector on container object field returned by render to get rendered elements
const { container } = render(<Note note={note} />)
const div = container.querySelector(".note")
screen.debug() to print HTML to console
user-event library to simulate user inputs
npm install --save-dev @testing-library/user-event
mock objects and functions are stub components to replace dependencies of component being tested
example method uses:
  const element = screen.getByText('Com
  userEvent.click(button)
  expect(mockHandler.mock.calls).toHaveLength(1)
  expect(div).not.toHaveStyle('display: none')
  const input = screen.getByRole('textbox')
  userEvent.type(input, 'testing a form...' )
  const input = screen.getByPlaceholderText('write here note content')
  expect(createNote.mock.calls[0][0].content).toBe('testing a form...' )
can also define id to input fields and find it using querySelector
screen.findByText returns promise
screen.queryByText doesnt cause exception if element is not found useful for ensuring something isnt rendered
find out test coverage using 
  CI=true npm test -- --coverage
integration testing more difficult because we would have to mock server data
Jest offers snapshot testing which compares HTML code before and after events occur
===part d end to end testing===
so far done integration and unit testing for the backend API
now looking at end to end (E2E) tests
can test using Selenium
or headless browsers which are browsers with no GUI (chrome has headless mode)
E2E tests whole system but can be challenging to make and execution time can take awhile
E2E tests can be flaky - different results when running same code
Cypress E2E library
- run in browser while other libraries run in node process connected to browser via API
install Cypress to the frontend
npm install --save-dev cypress
- add script
"cypress:open": "cypress open"
Cypress tests require the tested system to be running and do not start the system when they are run
- add script to backend
"start:test": "cross-env NODE_ENV=test node index.js"
start cypress with npm run cypress:open
when cypress first runs it creates directory with integration test examples
cypress tests have describes and it (vs test) similar to Jest
shouldnt use function arrow notation because it may cause unexpected behaviour no ()=>{}
cy.visit("http://localhost:3000") cy.contains("notes")
cy.contains("btn").click
cy.get('#password').type('mluukkai')
better to give form ids to refer to
searching by text using cy.contains returns first element found
to be able to use the cy variable:
- npm install eslint-plugin-cypress --save-dev
- and update .eslintrc.js with
  -"plugins": [
        "react", "jest", "cypress"
    ],
    "env": {
        "browser": true,
        "es6": true,
        "jest/globals": true,
        "cypress/globals": true
    },
cypress runs tests in order they are in code each test and browser state starts from 0 so must login in beforeeach block
E2E tests do not have access to db
- create API endpoints for testing to empty db
- if (process.env.NODE_ENV === "test") empty db
cy.request('POST', 'http://localhost:3001/api/testing/reset')
alternative but more diverse contains
cy.get('.error').should('contain', 'wrong credentials')
cypress requires colours be given as rgb
can chain cy.get with .and("have.css", "color", "rgb(255,0,0)")
cypress "should" should always be chained with another command like get
some css properties behave differently in different browsers can causes tests that pass in chrome to fail in firefox
if we use code (login code) in multiple places can make it a custom command
custom commands declared in cypress/support/commands.js
Cypress.Commands.add('login', ({ username, password }) => {
use it with cy.login({ username: 'mluukkai', password: 'salainen' })
when chaining contains the search continues from within the component found in the first command
check that the test runner is using the right components
cy.contains('second note').parent().find('button').click()
find right button and save to variable can then access using @
  -cy.contains('second note').parent().find('button').as('theButton')
  -cy.get('@theButton').click()
script to run cypress from command line instead of from the graphical test runner
- "test:e2e": "cypress run"
can git ignore test videos saved to cypress/videos/

