Will be learning about GraphQL, Facebook's alternative to REST for communication between browser and server
===part a GraphQL - server===
REST is resource based and all resources has its own address which identifies it
ex. /users/10 and all operations done are via HTTP requests
complex data retrieval would take multiple REST requests oftentimes returning unnceccesary data in the process
principle of GraphQL is that browser code forms a query describing data wanted
all GraphQL queries are sent to the same address with type POST
heart of all GraphQL applications is a schema for describing data sent between client and server
    type Person {
        name: String!
        phone: String
        street: String!
        city: String!
        id: ID! 
    }
    type Query {
        personCount: Int!
        allPersons: [Person!]!
        findPerson(name: String!): Person
    }
String is a scalar type of GraphQL
exclamation mark denotes required field
ID is string but GraphQL ensures its uniqueness
schema describes what kind of params query can have, and what kind of data can be sent and received to and from the server
query {
  allPersons {
    name
    phone
  }
}
query must describe which fields of the object the query returns
non-exclamation mark means that return value can be null
will be using Apollo Server
npm install apollo-server graphql
const server = new ApolloServer({
  typeDefs,
  resolvers,
})
heart of code is ApolloServer which is given two parameters
typeDefs containing GraphQL schema
and resolves object which defines how GraphQL queries are responded to
When Apollo server is run in development mode the page http://localhost:4000 has a button Query your server that takes us to Apollo Studio Explorer.
^useful for making queries
resolve for ex. fetching single person
(root, args) => persons.find(p => p.name === args.name)
all resolver functions are given four parameters
Apollo defines default resolvers if we dont define ourselves
ex. default
    Person: {
        name: (root) => root.name,
        phone: (root) => root.phone,
        street: (root) => root.street,
        city: (root) => root.city,
        id: (root) => root.id
    }
if object saved do not have a certain field then default resolver is not sufficient and we have to define our own
ex. Person: {
    address: (root) => {
      return { 
        street: root.street,
        city: root.city
      }
    }
  }
whenever Person object is returned the other fields are returned using their default resolvers whereas address uses self-defined resolver
param root if the Person object so fields can be taken
Mutations are operations that cause a change ex. add person
type Mutation {
  addPerson(
    name: String!
    phone: String
    street: String!
    city: String!
  ): Person
}
Mutation is given details of person as params with phone being nullable
Mutation returns Person if successful and null if not successful
Mutation also requires a resolver
const resolvers = {
  // ...
  Mutation: {
    addPerson: (root, args) => {
      const person = { ...args, id: uuid() }
      persons = persons.concat(person)
      return person
    }
  }
}
some error handling is done via GraphQL validation but more complex cases handled by error handling mechanism of Apollo Server
const {UserInputError} = require("apollo-server")
//...
addPerson: (root, args) => {
      if (persons.find(p => p.name === args.name)) {
        throw new UserInputError('Name must be unique', {
          invalidArgs: args.name,
        })
      }
use enum to filter queries
query {
  allPersons(phone: YES) {
    name
    phone 
  }
}
enum YesNo {
  YES
  NO
}
....allPersons(phone: YesNo): [Person!]!....
resolver changes to
allPersons: (root, args) => {
    if (!args.phone) {
      return persons
    }
    const byPhone = (person) =>
      args.phone === 'YES' ? person.phone : !person.phone
    return persons.filter(byPhone)
  },
possible to combine multiple fields of type Query into one query
query {
  personCount
  allPersons {
    name
  }
}
can also use same query but supply different names
query {
  havePhone: allPersons(phone: YES){
    name
  }
  phoneless: allPersons(phone: NO){
    name
  }
}
beneficial to name queries expecially when queries or mutations have parameters
===part b React and GraphQL===
Relay by Facebook or Apollo Client to communicate with server from client
in new react project
note: apollo may not work with newest version of React either downgrade React or force update ignore
npm install @apollo/client graphql
import { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, gql } from '@apollo/client'
const client = new ApolloClient({
  cache: new InMemoryCache(),
  link: new HttpLink({
    uri: 'http://localhost:4000',
  })
})
const query = gql'query { allPersons ....}
client.query({query}).then.....
app can communicate with server using client object
wrap App with <ApolloProvider client={client}>
useQuery hook to make queries
const ALL_PERSONS = gql`query {...
const result = useQuery(ALL_PERSONS)
useQuery returns object with multiple fields one is loading which is true if no response yet
result.data.allPersons contains data
use GraphQL variables to pass params dynamically
query findPersonByName($nameToSearch: String!) {
  findPerson(name: $nameToSearch) {
useLazyQuery or useQuery with option skip to execute query based on condition
const result = useQuery(FIND_PERSON, {
    variables: { nameToSearch },
    skip: !nameToSearch,
  })
Apollo client saves responses of queries to cache and will not send same query again
useMutation hook provides mutation making functionality
const CREATE_PERSON = gql`.....
const [ createPerson ] = useMutation(CREATE_PERSON)
createPerson({  variables: { name, phone, street, city } })
useMutation returns an array first being function to cause mutation
can make query poll to update cache
const result = useQuery(ALL_PERSONS, {
    pollInterval: 2000
^causes unncessary web traffic
can use refetchQueries param to run when new person is created
refetchQueries: [ { query: ALL_PERSONS } ]
can separate queries into own file queries.js:
export const CREATE_PERSON.... ALL_PERSON...
can register error handler function to useMutation's onError option
then use setError to set error
const [ createPerson ] = useMutation(CREATE_PERSON, {
  onError: (error) => {
      setError(error.graphQLErrors[0].message)
    }
if result of mutation is null GraphQL sees it as non error, but we can use result field to handle
const [ changeNumber, result ] = useMutation(EDIT_NUMBER)
in useEffect if (result.data && result.data.editNumber === null) deps array [result.data]
esLint warning about setError missing can just ignore line
===part c database and user administration===
using Mongoose and Apollo
npm install mongoose
define schema
const schema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    minlength: 5
  },....
module.exports = mongoose.model('Person', schema)
good practice to keep validation in database
GraphQL automatically parses mongo _id to id
resolver functions now return promises (before normal objects) and Apollo server sends back resolved value
allPersons: async (root, args) => {
  return Person.find({})
},
roughly translate to
Person.find({}).then( result => {
  // return the result 
})
now that validation is added to schema must wrap save() methods in try/catch
try {
    await person.save()
  } catch (error) {
    throw new UserInputError(error.message, {
      invalidArgs: args,
    })
expand server object by adding third param context
const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: async ({ req }) => {
    const auth = req ? req.headers.authorization : null
    if (auth && auth.toLowerCase().startsWith('bearer ')) {
      const decodedToken = jwt.verify(
        auth.substring(7), JWT_SECRET
      )
      const currentUser = await User.findById(decodedToken.id).populate('friends')
      return { currentUser }
    }
  }
})
object returned by context is given to all resolvers as their third param
context is where you do things shared by multiple resolves like user identification
currentUser field of context is set to user or undefined if no user connected
Query: {
  // ...
  me: (root, args, context) => {
    return context.currentUser
  }
},
me query returns null if no valid token is attached to request
in mutation:
const currentUser = context.currentUser

    if (!currentUser) {
      throw new AuthenticationError("not authenticated")
    }
If a logged-in user cannot be found from the context, an AuthenticationError is thrown
=== part d login and updating the cache===
for frontend add state for token
define mutation for logging in
export const LOGIN = gql`mutation logn($username: String!, $password: String!)`
logout user by setting token state to null, remove token from local storage, and reset cache of Apollo client
^important to reset cache in case of cached sensitive data
resetStore method of Apollo client object to reset cache
useApolloClient hook to access client object
const client = useApolloClient()
const logout = () => {
    setToken(null)
    localStorage.clear()
    client.resetStore()
  }
redefine ApolloClient to add authorization header to requests
link param given to client defines how Apollo connects to server
const client = new ApolloClient({
  cache: new InMemoryCache(),
  link: authLink.concat(httpLink)
})
can provide update callback for mutation which Apollo runs after mutation
const [ createPerson, result ] = useMutation(CREATE_PERSON, {
    update: (cache, response) => {
      cache.updateQuery({ query: ALL_PERSONS }, ({ allPersons }) => {
        return {
          allPersons: allPersons.concat(response.data.addPerson),
        }
callback function given reference to cache and data returned by mutation
updateQuery updates specified queries in cache
can disable caching by setting fetchPolicy as no-cache
old data in cache can cause annoying bugs
===part e fragments and subscriptions===
use fragments to simplify queries that return similar results
first declare fragment for selecting all fields of type
fragment PersonDetails on Person {
  name
  phone .....
then can do queries in compact form
query {
  allPersons {
    ...PersonDetails
fragments defined not in GraphQL schema but in client
declare fragment once and save to variable
const PERSON_DETAILS = gql`
  fragment PersonDetails on Person {
    id....
fragment can then be placed in any query using dollar sign and curly braces
export const FIND_PERSON = gql`
  query findPersonByName($nameToSearch: String!) {
    findPerson(name: $nameToSearch) {
      ...PersonDetails
    }
  }
  ${PERSON_DETAILS}
GraphQL offers subscriptions to listen to changes on the server
when change occurs on server, all subsribers are notified
Apollo uses websockets for subscriber communication
refactor schemas to schema.js, resolvers to resolvers.js
use Apollo Server Express
npm install apollo-server-express apollo-server-core express @graphql-tools/schema
implement subscription for notifications 
type Subscription {
  personAdded: Person!
}    
^when person is added all subscribers get sent Person
install two packages for adding subscriptions to GraphQL
npm install subscriptions-transport-ws graphql-subscriptions
subscription personAdded needs resolver and addPerson resolver has to be modified to send notifications
subscriptions use publish-subscribe principle using PubSub object
all subscribers registered by returning them a iterator object
have to configure index.js on frontend to handle subscriptions
split from @apollo/client
import { getMainDefinition } from '@apollo/client/utilities'
import { WebSocketLink } from '@apollo/client/link/ws'
npm install @apollo/client subscriptions-transport-ws
configure HTTP connection and WebSocket connection to GraphQL server
useSubscription hook to subscribe
useSubscription(PERSON_ADDED, {
    onSubscriptionData: ({ subscriptionData }) => {
      console.log(subscriptionData)
callback function onSubscriptionData is called with new person details as param when person is added 
update Apollo cache when new data received
client.cache.updateQuery({ query: ALL_PERSONS }, ({ allPersons }) => {
        return {
          allPersons: allPersons.concat(addedPerson),
  ^^^^put this in useSubscription hook callback
initial problem of person added to cache and rendered twice because another component is also adding to cache
make a function that uses set to take care of manipulating cache
enable mongoose debugging using
mongoose.set('debug', true);
n+1 problem app gets data and loops through data to get more data
solution may be to use join query
can use fourth param of resolver for further optimization, but only when necessary
Facebooks DataLoader may help with n+1 problem
